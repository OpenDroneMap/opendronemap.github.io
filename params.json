{
  "name": "OpenDroneMap",
  "tagline": "OpenDroneMap is a tool to postprocess drone, balloon, kite, and street view data to geographic data including orthophotos, point clouds, & textured mesh. In the tradition of the Ship of Theseus, it was originally forked from qwesda/BundlerTools https://github.com/qwesda/BundlerTools.",
  "body": "![](https://raw.githubusercontent.com/OpenDroneMap/OpenDroneMap/master/img/odm_image.png)\r\n\r\nWhat is it?\r\n===========\r\n\r\nOpenDroneMap is an open source toolkit for processing aerial drone imagery. Typical drones use simple point-and-shoot cameras, so the images from drones, while from a different perspective, are similar to any pictures taken from point-and-shoot cameras, i.e. non-metric imagery. OpenDroneMap turns those simple images into three dimensional geographic data that can be used in combination with other geographic datasets.\r\n\r\n![](https://raw.githubusercontent.com/OpenDroneMap/OpenDroneMap/master/img/tol_ptcloud.png)\r\n\r\nIn a word, OpenDroneMap is a toolchain for processing raw civilian UAS imagery to other useful products. What kind of products?\r\n\r\n1. Point Clouds\r\n2. Digital Surface Models\r\n3. Textured Digital Surface Models\r\n4. Orthorectified Imagery\r\n5. Classified Point Clouds\r\n6. Digital Elevation Models\r\n7. etc.\r\n\r\nSo far, it does Point Clouds, Digital Surface Models, Textured Digital Surface Models, and Orthorectified Imagery.\r\n\r\nUsers' mailing list: http://lists.osgeo.org/cgi-bin/mailman/listinfo/opendronemap-users\r\n\r\nDeveloper's mailing list: http://lists.osgeo.org/cgi-bin/mailman/listinfo/opendronemap-dev\r\n\r\nOverview video: https://www.youtube.com/watch?v=0UctfoeNB_Y\r\n\r\nDevelopers\r\n=================\r\n\r\nHelp improve our software!\r\n\r\n[![Join the chat at https://gitter.im/OpenDroneMap/OpenDroneMap](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/OpenDroneMap/OpenDroneMap?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n1. Try to keep commits clean and simple\r\n2. Submit a pull request with detailed changes and test results\r\n\r\nSteps to get OpenDroneMap running:\r\n==================================\r\n\r\n(Requires Ubuntu 14.04 or later, see https://github.com/OpenDroneMap/odm_vagrant for running on Windows in a VM)\r\n\r\nSupport for Ubuntu 12.04 is currently BROKEN with the addition of OpenSfM and Ceres-Solver. We are working hard to get it working again in the future. \r\n\r\n#### Building OpenDroneMap using git\r\n\r\n    cd path/to/odm/dir\r\n    git clone https://github.com/OpenDroneMap/OpenDroneMap.git .\r\n    export PYTHONPATH=$PYTHONPATH:`pwd`/SuperBuild/install/lib/python2.7/dist-packages:`pwd`/SuperBuild/src/opensfm\r\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/SuperBuild/install/lib\r\n    bash configure.sh\r\n    mkdir build && cd build && cmake .. && make && cd ..\r\n\r\n For Ubuntu 15.10 users, this will help you get running:\r\n\r\n    sudo apt-get install python-xmltodict\r\n    sudo ln -s /usr/lib/x86_64-linux-gnu/libproj.so.9 /usr/lib/libproj.so\r\n    \r\n#### Running OpenDroneMap\r\n\r\nFirst you need a set of images, which may or may not be georeferenced. There are two ways OpenDroneMap can understand geographic coordinates. First, the images can be geotagged in their EXIF data. This is the default. Alternatively, you can create a GCP file, [a process detailed here](https://github.com/OpenDroneMap/OpenDroneMap/wiki/2.-Running-OpenDroneMap#running-odm-with-ground-control)\r\n\r\nCreate a project folder and places your images in an \"images\" directory:\r\n\r\n\r\n    |-- /path/to/project/\r\n        |-- images/\r\n            |-- img-1234.jpg\r\n            |-- ...\r\n\r\n\r\nExample data can be cloned from https://github.com/OpenDroneMap/odm_data\r\n\r\nThen run:\r\n\r\n    python run.py --project-path /path/to/project\r\n    \r\nThere are many options for tuning your project. See the [wiki](https://github.com/OpenDroneMap/OpenDroneMap/wiki/3.-Run-Time-Parameters) or run `python run.py -h`\r\n\r\nWhen the process finishes, the results will be organized as follows\r\n\r\n    |-- images/\r\n        |-- img-1234.jpg\r\n        |-- ...\r\n    |-- images_resize/\r\n        |-- img-1234.jpg\r\n        |-- ...\r\n    |-- opensfm/\r\n        |-- not much useful in here\r\n    |-- pmvs/\r\n        |-- recon0/\r\n            |-- models/\r\n                |-- option-0000.ply         # Dense point cloud\r\n    |-- odm_meshing/\r\n        |-- odm_mesh.ply                    # A 3D mesh\r\n        |-- odm_meshing_log.txt             # Output of the meshing task. May point out errors.\r\n    |-- odm_texturing/\r\n        |-- odm_textured_model.obj          # Textured mesh\r\n        |-- odm_textured_model_geo.obj      # Georeferenced textured mesh\r\n        |-- texture_N.jpg                   # Associated textured images used by the model\r\n    |-- odm_georeferencing/\r\n        |-- odm_georeferenced_model.ply     # A georeferenced dense point cloud\r\n        |-- odm_georeferenced_model.ply.laz # LAZ format point cloud\r\n        |-- odm_georeferenced_model.csv     # XYZ format point cloud\r\n        |-- odm_georeferencing_log.txt      # Georeferencing log\r\n        |-- odm_georeferencing_utm_log.txt  # Log for the extract_utm portion\r\n    |-- odm_georeferencing/\r\n        |-- odm_orthophoto.png              # Orthophoto image (no coordinates)\r\n        |-- odm_orthophoto.tif              # Orthophoto GeoTiff\r\n        |-- odm_orthophoto_log.txt          # Log file\r\n        |-- gdal_translate_log.txt          # Log for georeferencing the png file\r\n\r\n##### Viewing your results\r\n\r\nAny file ending in .obj or .ply can be opened and viewed in [MeshLab](http://meshlab.sourceforge.net/) or similar software. That includes `pmvs/recon0/models/option-000.ply`, `odm_meshing/odm_mesh.ply`, `odm_texturing/odm_textured_model[_geo].obj`, or `odm_georeferencing/odm_georeferenced_model.ply`. Below is an example textured mesh:\r\n\r\n![](https://raw.githubusercontent.com/OpenDroneMap/OpenDroneMap/master/img/tol_text.png)\r\n\r\nYou can also view the orthophoto GeoTIFF in QGIS or other mapping software:\r\n\r\n![](https://raw.githubusercontent.com/OpenDroneMap/OpenDroneMap/master/img/bellus_map.png)\r\n\r\n#### Using Docker\r\n\r\nYou can build and run OpenDroneMap in a Docker container:\r\n\r\n    export IMAGES=/absolute/path/to/your/project\r\n    docker build -t opendronemap:latest .\r\n    docker run -v $IMAGES:/images opendronemap:latest\r\n\r\nReplace /absolute/path/to/your/images with an absolute path to the directory containing your project (where the images are)\r\nTo pass in custom parameters to the `run.py` script, simply pass it as arguments to the `docker run` command.\r\n\r\n---\r\n\r\nHere are some other videos, which may be outdated:\r\n\r\n- https://www.youtube.com/watch?v=7ZTufQkODLs (2015-01-30)\r\n- https://www.youtube.com/watch?v=m0i4GQdfl8A (2015-03-15)\r\n\r\nNow that texturing is in the code base, you can access the full textured meshes using MeshLab. Open MeshLab, choose `File:Import Mesh` and choose your textured mesh from a location similar to the following: `reconstruction-with-image-size-1200-results\\odm_texturing\\odm_textured_model.obj`\r\n\r\n---\r\n\r\nLong term, the aim is for the toolchain to also be able to optionally push to a variety of online data repositories, pushing hi-resolution aerials to [OpenAerialMap](http://opentopography.org/), point clouds to [OpenTopography](http://opentopography.org/), and pushing digital elevation models to an emerging global repository (yet to be named...). That leaves only digital surface model meshes and UV textured meshes with no global repository home.\r\n\r\n---\r\n\r\n\r\nDocumentation:\r\n==============\r\n\r\nFor documentation, please take a look at our [wiki](https://github.com/OpenDroneMap/OpenDroneMap/wiki).\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}